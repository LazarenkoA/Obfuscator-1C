package obfuscator

import (
	"context"
	"crypto/sha256"
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"testing"
	"time"

	"github.com/google/uuid"
	"github.com/knetic/govaluate"
	"github.com/stretchr/testify/assert"
)

func TestObfuscate(t *testing.T) {

	code := `

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Проверить выполнение отложенных обработчиков
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	ОбщегоНазначенияБГУ.УстановитьНедоступныеЭлементыФормы(Элементы, Объект,
		"МатериалыПодборНоменклатуры,ОсновныеСредстваПодборОС,СоставКомиссииПодборСотрудников,СоставКомиссииПодборКомиссии");
	
	// Типовые операции и дополнительные табличные части
	БухгалтерскиеОперацииСервер.ПриСозданииНаСервере(Отказ, СтандартнаяОбработка,
		Элементы.БухгалтерскаяОперация, Элементы.ДополнительныеТабличныеЧасти);
	// Конец Типовые операции и дополнительные табличные части
	
	УправлениеМатериальнымиЗапасами.ЗаполнитьСчетаУчетаМЗ105(ЭтаФорма);
		
	Если Параметры.Ключ.Пустая() Тогда
		
		ПодготовитьФормуНаСервере();
		
	КонецЕсли;
	
	Счет10500 = БухгалтерскийУчет.СчетПоКоду("105.00", Объект.Дата, Объект.Организация);
	УправлениеМатериальнымиЗапасами.ОтключитьВидимостьКолонкиДопСубконто(Элементы.МатериалыДополнительнаяАналитикаСчета, ВсеСчета105);
	
	ЕдиницаШт = Справочники.КлассификаторЕдиницИзмерения.ПолучитьЕдиницуИзмеренияПоУмолчанию();
	
	УстановитьВидимостьЭлементовФормы();
	
	// ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбщегоНазначенияБГУ.ПриСозданииНаСервере(ЭтотОбъект, Объект);

	// Подсистема "ОбменСКонтрагентами".
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументСсылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.МестоРазмещенияКоманд = Элементы.КомандыЭДО;
	ПараметрыЭДОПриСоздании.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец подсистема "ОбменСКонтрагентами".
	
	// СтандартныеПодсистемы.УчетОригиналовПервчиныхДокументов
	УчетОригиналовПервичныхДокументов.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект, Элементы.ГруппаОтветственныйКомментарий);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервчиныхДокументов 

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Типовые операции и дополнительные табличные части
	БухгалтерскиеОперацииСервер.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект,
		Элементы.БухгалтерскаяОперация, Элементы.ДополнительныеТабличныеЧасти);
	// Конец Типовые операции и дополнительные табличные части
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриЧтенииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументСсылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.МестоРазмещенияКоманд = Элементы.КомандыЭДО;
	ПараметрыЭДОПриСоздании.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ОбменСКонтрагентами.ПриЧтенииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	ОбщегоНазначенияБГУ.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Элементы.Договор.Доступность = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);
	УстановитьДоступностьСвязанныхРеквизитовОрганизации();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// Подсистема "ОбменСКонтрагентами".
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец подсистема "ОбменСКонтрагентами".

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	БухгалтерскиеОперацииКлиент.ПередЗаписью(Отказ, ПараметрыЗаписи, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	БухгалтерскиеОперацииСервер.ПередЗаписью(Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма);
	
	ОбщегоНазначенияБГУ.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	БухгалтерскиеОперацииКлиент.ПослеЗаписи(ПараметрыЗаписи, ЭтаФорма);
	Оповестить("ДокументыПоУчетуМатериальныхЗапасовИзменение");
	УстановитьВидимостьДанныхДрагМатериалов();

	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента(ЭтотОбъект, ПараметрыЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если УправлениеМатериальнымиЗапасамиКлиент.ОбработкаВыбораИзПодбораМЗ(ИсточникВыбора) Тогда
		ОбработатьВыборПодбораНаСервере(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ДобавлениеСпискаДМ.Форма.Форма" Тогда
		ОбработкаДобавленияДМДляОбъектаНаСервере(ВыбранноеЗначение);
		УстановитьВидимостьДанныхДрагМатериалов();
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.КлассификационныеПризнакиСчетов.Форма.ФормаВыбора" Тогда
		УстановитьКПСВыделеннымСтрокам(ВыбранноеЗначение);
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Типовые операции и дополнительные табличные части
	БухгалтерскиеОперацииСервер.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец Типовые операции и дополнительные табличные части
	
	ЗаполнитьТекстовыеДанныеВсехСтрок(Объект.Материалы);
	ЗаполнитьТекстовыеДанныеВсехСтрок(Объект.ОсновныеСредства);
	
	ОбщегоНазначенияБГУ.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);

	// Подсистема "ОбменСКонтрагентами".
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец подсистема "ОбменСКонтрагентами".

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ОбщегоНазначенияБГУКлиент.ПередЗакрытием(ЭтотОбъект, Объект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		
		// Подсистема "ОбменСКонтрагентами".
		ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
		ПараметрыОповещения.Форма = ЭтотОбъект;
		ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
		ПараметрыОповещения.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
		ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
		
		ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
		// Конец подсистема "ОбменСКонтрагентами".

	КонецЕсли;
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов    
	УчетОригиналовПервичныхДокументовКлиент.ОбработчикОповещенияФормаДокумента(ИмяСобытия, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	ПроверитьЗаполнениеСуммВТаблице("Материалы", Отказ);
	ПроверитьЗаполнениеСуммВТаблице("ОсновныеСредства", Отказ);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ОбщегоНазначенияБГУКлиент.ПриИзмененииДатыДокумента(ЭтотОбъект, Объект, "ДатаПриИзмененииНаКлиенте");
	// Дальнейшая обработка изменения даты выполняется в процедурах ДатаПриИзмененииНаКлиенте и ДатаПриИзмененииНаСервере.
	// Код, размещенный здесь, может работать неправильно, т.к. пользователь мог отказаться от изменения даты.
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзмененииНаКлиенте(Результат, ДополнительныеПараметры) Экспорт
	
	// Структура КэшПараметров инициализируется в ОбщегоНазначенияБГУ.ИнициализироватьКэшПараметровФормы().
	Если ЭтотОбъект.КэшПараметров.ИзмениласьУчетнаяПолитика Тогда
		
		ДатаПриИзмененииНаСервере();
		
	КонецЕсли;
	
	ОбщегоНазначенияБГУКлиент.ПослеИзмененияКлючевыхРеквизитовДокумента(ЭтотОбъект, Объект)
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	Если ЭтотОбъект.КэшПараметров.ИзмениласьУчетнаяПолитика Тогда
		
		ОбщегоНазначенияБГУ.ПриИзмененииУчетнойПолитики(ЭтотОбъект, Объект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
	ДоступностьДоговора();
	УстановитьДоступностьСвязанныхРеквизитовОрганизации();
	
	ОбщегоНазначенияБГУКлиент.ПослеИзмененияКлючевыхРеквизитовДокумента(ЭтотОбъект, Объект)
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ОбщегоНазначенияБГУ.ПриИзмененииУчетнойПолитики(ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИФОПриИзменении(Элемент)
	
	ИФОПриИзмененииНаСервере();
	
	ОбщегоНазначенияБГУКлиент.ПослеИзмененияКлючевыхРеквизитовДокумента(ЭтотОбъект, Объект)
	
КонецПроцедуры

&НаСервере
Процедура ИФОПриИзмененииНаСервере()
	
	ОбщегоНазначенияБГУ.ПриИзмененииУчетнойПолитики(ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ДоступностьДоговора();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ЗаполнитьПоДокументуОснованию();
		ДоступностьДоговора();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя = "СтраницаДрагМатериалы" Тогда
		ЗаполнитьОбъектыСДрагМатериалами();
		ЗаполнитьКлючиСтрокДрагМатериалов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦМОПриИзменении(Элемент)
	ЦМОПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЭДОНажатие(Элемент, СтандартнаяОбработка)

	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект, СтандартнаяОбработка);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТиповыхОпераций

&НаКлиенте
Процедура Подключаемый_ПриНачалеВыбораТиповойОперации(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	БухгалтерскиеОперацииКлиент.ПриНачалеВыбораТиповойОперации(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииТиповойОперации(Элемент)
	
	ПодключаемыйСервер_ПриИзмененииТиповойОперации(Элемент.Родитель.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ПодключаемыйСервер_ПриИзмененииТиповойОперации(ИмяЭлемента)

	БухгалтерскиеОперацииСервер.ПриИзмененииТиповойОперации(ЭтаФорма.Элементы[ИмяЭлемента]);	

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаОткрытьОперацию(Команда)

	БухгалтерскиеОперацииКлиент.КомандаОткрытьОперацию(Объект, Элементы.БухгалтерскаяОперация);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриНачалеВыбораДопРеквизита(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	БухгалтерскиеОперацииКлиент.ДопРеквизитНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДопРеквизита(Элемент)

	БухгалтерскиеОперацииКлиент.ДопРеквизитИзменение(Элемент, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизитаДополнительнойТабличнойЧасти(Элемент)

	БухгалтерскиеОперацииКлиент.ПриИзмененииРеквизитаДополнительнойТабличнойЧасти(Элемент, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УправлениеТиповымиОперациями(Команда)

	БухгалтерскиеОперацииКлиент.КомандаУправлениеТиповымиОперациями(ЭтаФорма, Команда);	

КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Материалы

&НаКлиенте
Процедура МатериалыНоменклатураПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	ТекущиеДанные.ЕдиницаИзмерения = ЕдиницаИзмеренияНФА(ТекущиеДанные.Номенклатура);
	ЗаполнитьДанныеСчетаВСтроке(ЭтотОбъект, Элементы.Материалы.ТекущиеДанные, Истина);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыКоличествоПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	ПересчитатьСумму(ТекущиеДанные.Количество, ТекущиеДанные.Цена, ТекущиеДанные.Сумма);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЦенаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	ПересчитатьСумму(ТекущиеДанные.Количество, ТекущиеДанные.Цена, ТекущиеДанные.Сумма);
	ТекущиеДанные.ЦенаПоДокументам = ТекущиеДанные.Цена;
	ПересчитатьСумму(ТекущиеДанные.КоличествоПоДокументам, ТекущиеДанные.ЦенаПоДокументам, ТекущиеДанные.СуммаПоДокументам);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСуммаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	ПересчитатьЦену(ТекущиеДанные.Количество, ТекущиеДанные.Цена, ТекущиеДанные.Сумма);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыКоличествоПоДокументамПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	ПересчитатьСумму(ТекущиеДанные.КоличествоПоДокументам, ТекущиеДанные.ЦенаПоДокументам, ТекущиеДанные.СуммаПоДокументам);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЦенаПоДокументамПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	ПересчитатьСумму(ТекущиеДанные.КоличествоПоДокументам, ТекущиеДанные.ЦенаПоДокументам, ТекущиеДанные.СуммаПоДокументам);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСуммаПоДокументамПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	ПересчитатьЦену(ТекущиеДанные.КоличествоПоДокументам, ТекущиеДанные.ЦенаПоДокументам, ТекущиеДанные.СуммаПоДокументам);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
		ЗаполнитьТекстовыеЗаголовкиСтроки(ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСчетУчетаПриИзменении(Элемент)
	УправлениеМатериальнымиЗапасамиКлиентСервер.УстановитьДанныеДинамическихКолонокТекущейСтрокиМатериалов(Объект, Элементы.Материалы.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСчетУчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УправлениеМатериальнымиЗапасамиКлиент.НачалоВыбораПолногоСчетаМатериалаВТаблицеДокумента(ЭтотОбъект,
		Неопределено, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСчетУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УправлениеМатериальнымиЗапасамиКлиент.ОбработкаВыбораСчетаМатериалаВТаблицеДокумента(
		ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыКПСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УправлениеМатериальнымиЗапасамиКлиент.НачалоВыбораПолногоСчетаМатериалаВТаблицеДокумента(ЭтотОбъект,
		Неопределено, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыКПСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УправлениеМатериальнымиЗапасамиКлиент.ОбработкаВыбораСчетаМатериалаВТаблицеДокумента(
		ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыКФОНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УправлениеМатериальнымиЗапасамиКлиент.НачалоВыбораПолногоСчетаМатериалаВТаблицеДокумента(ЭтотОбъект,
		Неопределено, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыКФООбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УправлениеМатериальнымиЗапасамиКлиент.ОбработкаВыбораСчетаМатериалаВТаблицеДокумента(
		ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСчетУчетаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	УправлениеМатериальнымиЗапасамиКлиент.АвтоПодборСчетаМатериалаВТаблицеДокумента(ЭтаФорма, Счет10500, Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСчетУчетаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	УправлениеМатериальнымиЗапасамиКлиент.ОкончаниеВводаТекстаСчетаМатериалаВТаблицеДокумента(ЭтаФорма, Счет10500, Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПередУдалением(Элемент, Отказ)
	ОбъектНаУдаление = Элементы.Материалы.ТекущиеДанные.Номенклатура;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ОбъектНФА", ОбъектНаУдаление);
	НайденныеСтроки = Объект.ДрагоценныеМатериалы.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество()<>0 Тогда
		режим = РежимДиалогаВопрос.ДаНет;
		ПараметрыОповещения = Новый Структура("НайденныеСтроки", НайденныеСтроки);
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОДрагМатериалах", ЭтаФорма, ПараметрыОповещения);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Удалить данные о содержании драгоценных материалов в удаленном объекте НФА ("+
						СокрЛП(ОбъектНаУдаление)+") на закладке ""Драгоценные материалы""?'"), Режим, 0);
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_СписокНФАДокументаОснования

&НаКлиенте
Процедура СписокНФАДокументаОснованияПриАктивизацииСтроки(Элемент)
	Если (Элемент.ТекущиеДанные <> Неопределено)И(ЭтаФорма.ИспользоватьОтборДрагМатериаловПоОбъектуНФА) Тогда
		ПодключитьОбработчикОжидания("ОтобратьСтрокиТаблицыДрагМатериаловПриАктивизацииОбъектаНФА", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ОсновныеСредства

&НаКлиенте
Процедура ОсновныеСредстваНоменклатураПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	ТекущиеДанные.ЕдиницаИзмерения = ЕдиницаШт;
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваКоличествоПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	ПересчитатьСумму(ТекущиеДанные.Количество, ТекущиеДанные.Цена, ТекущиеДанные.Сумма);
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваЦенаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	ПересчитатьСумму(ТекущиеДанные.Количество, ТекущиеДанные.Цена, ТекущиеДанные.Сумма);
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваСуммаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	ПересчитатьЦену(ТекущиеДанные.Количество, ТекущиеДанные.Цена, ТекущиеДанные.Сумма);
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваКоличествоПоДокументамПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	ПересчитатьСумму(ТекущиеДанные.КоличествоПоДокументам, ТекущиеДанные.ЦенаПоДокументам, ТекущиеДанные.СуммаПоДокументам);
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваЦенаПоДокументамПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	ПересчитатьСумму(ТекущиеДанные.КоличествоПоДокументам, ТекущиеДанные.ЦенаПоДокументам, ТекущиеДанные.СуммаПоДокументам);
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваСуммаПоДокументамПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ОсновныеСредства.ТекущиеДанные;
	ПересчитатьЦену(ТекущиеДанные.КоличествоПоДокументам, ТекущиеДанные.ЦенаПоДокументам, ТекущиеДанные.СуммаПоДокументам);
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСредстваПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		ЗаполнитьТекстовыеЗаголовкиСтроки(Элементы.ОсновныеСредства.ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_СоставПриложения

&НаКлиенте
Процедура СоставПриложенияВидПриложенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОткрытьФорму("Справочник.ВидыПервичныхДокументов.ФормаВыбора",,Элемент);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_СоставКомиссии

&НаКлиенте
Процедура СоставКомиссииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Сотрудники") Тогда
		ДанныеСотрудника = ПолучитьДанныеСотрудника(ВыбранноеЗначение, Объект.Дата);
		НовСтрока = Объект.СоставКомиссии.Добавить();
		НовСтрока.ДолжностьЧленаКомиссии= ДанныеСотрудника.Должность;
		НовСтрока.ФамилияЧленаКомиссии	= ДанныеСотрудника.Фамилия;
		НовСтрока.ИмяЧленаКомиссии 		= ДанныеСотрудника.Имя;
		НовСтрока.ОтчествоЧленаКомиссии	= ДанныеСотрудника.Отчество;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ПостоянноДействующиеКомиссии") Тогда
		
		Объект.СоставКомиссии.Очистить();
		
		ДанныеКомиссии = ПолучитьДанныеКомиссии(ВыбранноеЗначение, Объект.Дата);
		
		ЗаполнитьЗначенияСвойств(Объект, ДанныеКомиссии.ДанныеПриказа); 
		
		Для каждого ТекСтрокаКомиссии Из ДанныеКомиссии.ТребуемыеДанные Цикл
		
			ЗаполнитьЗначенияСвойств(Объект.СоставКомиссии.Добавить(), ТекСтрокаКомиссии);
		
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставКомиссииПредседательПриИзменении(Элемент)
	
	Если ТекущийЭлемент.ТекущиеДанные.Председатель Тогда
		
		Для Каждого Стр Из Объект.СоставКомиссии Цикл
			Если НЕ Стр = ТекущийЭлемент.ТекущиеДанные Тогда
				Стр.Председатель = Ложь;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьКПСМатериалы(Команда)
	
	ОтборКПС = Новый Структура;
	ОтборКПС.Вставить("Организации", Объект.Организация);
	ОтборКПС.Вставить("ИФО", Объект.ИФО);
	ОтборКПС.Вставить("НаДату", Объект.Дата);
	
	СписокВидовКПС = Новый Массив;
	СписокВидовКПС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыКБК.КРБ"));
	СписокВидовКПС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыКБК.АУИБУ"));
	СписокВидовКПС.Добавить(ПредопределенноеЗначение("Перечисление.ВидыКБК.Произвольный"));
	ОтборКПС.Вставить("ВидПоказателя", СписокВидовКПС);
	
	ПараметрыВыб = Новый Структура;
	ПараметрыВыб.Вставить("Отбор", ОтборКПС);
	
	ОткрытьФорму("Справочник.КлассификационныеПризнакиСчетов.ФормаВыбора", ПараметрыВыб, ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборСотрудников(Команда)
	
	Если ОрганизацияПустая() Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура("Отбор, ЗакрыватьПриВыборе", Новый Структура("Владелец", Объект.Организация), Ложь);
	ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора", ПараметрыФормы, Элементы.СоставКомиссии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборКомиссии(Команда)
	
	Если ОрганизацияПустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Отбор, ЗакрыватьПриВыборе", Новый Структура("Владелец", Объект.Организация), Истина);
	ОткрытьФорму("Справочник.ПостоянноДействующиеКомиссии.ФормаВыбора", ПараметрыФормы, Элементы.СоставКомиссии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	УправлениеМатериальнымиЗапасамиКлиент.ОткрытьПодборМатериалов(ЭтаФорма, Объект);

КонецПроцедуры

 &НаКлиенте
Процедура ПодборОС(Команда)
	
	УправлениеОсновнымиСредствамиКлиент.ОткрытьПодборОсновныхСредств(ЭтаФорма, Объект);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ДобавитьЛомОтходыДМДляОбъекта(Команда)
	Если Элементы.СписокНФАДокументаОснования.ТекущиеДанные = Неопределено Тогда
		ТекстОшибки = НСтр("ru='Не выбран объект НФА!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Объект.Ссылка, "СписокНФАДокументаОснования", "Объект");
	Иначе	
		УчетДрагМатериаловКлиент.ОткрытьДобавлениеСпискомДМ(ЭтаФорма, Объект, Элементы.СписокНФАДокументаОснования.ТекущиеДанные.Номенклатура, ПредопределенноеЗначение("Справочник.ИнвентарныеНомераОС.ПустаяСсылка"), 
		Элементы.СписокНФАДокументаОснования.ТекущиеДанные.Количество, "Лом");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСписокДМДляОбъекта(Команда)
	Если Элементы.СписокНФАДокументаОснования.ТекущиеДанные = Неопределено Тогда
		ТекстОшибки = НСтр("ru='Не выбран объект НФА!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Объект.Ссылка, "СписокНФАДокументаОснования", "Объект");
	Иначе	
		Если Элементы.СписокНФАДокументаОснования.ВыделенныеСтроки.Количество() = 1 Тогда
			УчетДрагМатериаловКлиент.ОткрытьДобавлениеСпискомДМ(ЭтаФорма, Объект, Элементы.СписокНФАДокументаОснования.ТекущиеДанные.Номенклатура, ПредопределенноеЗначение("Справочник.ИнвентарныеНомераОС.ПустаяСсылка"), 
			Элементы.СписокНФАДокументаОснования.ТекущиеДанные.Количество, "Изделия");
			
			ЭтаФорма.ВариантВводаДанныхДМ = 1;
		Иначе
			МассивВыделенныеСтроки = Элементы.СписокНФАДокументаОснования.ВыделенныеСтроки;
			
			АдресТаблицыОбъектовНФА = ПоместитьТаблицуОбъектовНФАДляДМВХранилище(МассивВыделенныеСтроки);
			
			УчетДрагМатериаловКлиент.ОткрытьДобавлениеСпискомДМДляПеречняОбъектов(ЭтаФорма, Объект, АдресТаблицыОбъектовНФА, "Изделия"); 
			
			ЭтаФорма.ВариантВводаДанныхДМ = 2;
		КонецЕсли;
		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимОтбораДМПоОбъекту(Команда)
	
	ЭтаФорма.ИспользоватьОтборДрагМатериаловПоОбъектуНФА = НЕ ЭтаФорма.ИспользоватьОтборДрагМатериаловПоОбъектуНФА;
	УстановитьВидимостьДанныхДрагМатериалов();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)

	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПроверитьЗаполнениеСуммВТаблице(ИмяТаблицы, Отказ)
	СинонимИмениТаблицы = Объект.Ссылка.Метаданные().ТабличныеЧасти[ИмяТаблицы].Синоним;
	Для Каждого Строка Из Объект[ИмяТаблицы] Цикл
		Если Строка.КоличествоНедостачи <> 0 И Строка.КоличествоИзлишки <> 0 Тогда
			ПояснениеОшибки = НСтр("ru = '""Необходимо заполнить только одну из колонок - ""Недостачи"" или ""Излишки""'");
			ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность", НСтр("ru = 'Излишки'"),
				Строка.НомерСтроки, СинонимИмениТаблицы, ПояснениеОшибки);
			ТекущаяСтрока = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТаблицы, Строка.НомерСтроки, "КоличествоИзлишки");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , ТекущаяСтрока, "Объект", Отказ);
		КонецЕсли;
		Если ЕстьОшибкиВСуммахСтроки(Строка) Тогда
			ПояснениеОшибки = НСтр("ru = '""Количество по документам"" не равно ""Количество фактически"" + ""Бой"" + ""Недостачи"" - ""Излишки""'"); 
			ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Корректность", НСтр("ru = 'Количество'"),
				Строка.НомерСтроки, СинонимИмениТаблицы, ПояснениеОшибки);
			ТекущаяСтрока = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТаблицы, Строка.НомерСтроки, "Количество");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , ТекущаяСтрока, "Объект", Отказ); 
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ЕстьОшибкиВСуммахСтроки(Строка)
	
	Возврат Строка.КоличествоПоДокументам <> Строка.Количество
										   + Строка.КоличествоБой
										   + Строка.КоличествоНедостачи
										   - Строка.КоличествоИзлишки;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ДекорацияСостояниеОригиналаНажатие()
    // СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
    УчетОригиналовПервичныхДокументовКлиент.ОткрытьМенюВыбораСостояния(ЭтотОбъект,Элементы.ДекорацияСостояниеОригинала);
    //Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ЗаполнитьТекстовыеДанныеВсехСтрок(Объект.Материалы);
	ЗаполнитьТекстовыеДанныеВсехСтрок(Объект.ОсновныеСредства);
	
КонецПроцедуры

// Процедура вызывается при формировании параметров подбора из процедуры УправлениеМатериальнымиЗапасамиКлиент.ОткрытьПодборМатериалов
//
&НаКлиенте
Процедура ДополнитьСтруктуруПодбора(ПараметрыПодбора, ДополнительныйПараметр) Экспорт

	ПараметрыПодбора.Вставить("Подразделение", Объект.Подразделение);
	ПараметрыПодбора.Вставить("ПоказыватьСчетУчета", Истина);
	
	ТипыНоменклатуры = Новый СписокЗначений;
	ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Блюдо"));
	ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ГСМ"));
	ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Медикаменты"));
	ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МолоднякИЖивотныеНаОткорме"));
	ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МягкийИнвентарь"));
	ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Посуда"));
	ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПродуктыПитания"));
	ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Продукция"));
	ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Стройматериалы"));
	ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПрочиеМЗ"));
	ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Оборудование"));
	ТипыНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.БСО"));

	ПараметрыПодбора.Вставить("ТипыНоменклатуры",ТипыНоменклатуры);
	ПараметрыПодбора.Вставить("ЕстьЦена",Истина);
	ПараметрыПодбора.Вставить("ВыводитьНулевуюНоменклатуру",Истина);
	ПараметрыПодбора.Вставить("ИмяТаблицы","Материалы");
	ПараметрыПодбора.Вставить("ПоказыватьЦены",Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьПараметрыПодбора(ПараметрыПодбора) Экспорт
	
	ПараметрыПодбора.Отбор.Вставить("Организация"	, Объект.Организация);
	ПараметрыПодбора.Отбор.Вставить("ИФО"			, Объект.ИФО);
	ПараметрыПодбора.Отбор.Вставить("Счет"			, "101.00,103.00,106.00");
	
	ПараметрыПодбора.Вставить("ВидРаспоряжения"	, "УчетныеДанные");
	ПараметрыПодбора.Вставить("СкрытьКолонки"	, "СчетУчета,КФО,КПС,ВидНФА");
	
	Если Объект.ОсновныеСредства.Количество() > 0 Тогда
		ПараметрыПодбора.Вставить("АдресОСВХранилище", ПоместитьОСВХранилище());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураПроверяемыхРеквизитов() Экспорт
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Организация");
	Если ЭтотОбъект.КэшПараметров.ИспользоватьУчетПоИФО Тогда
		СтруктураРеквизитов.Вставить("ИФО");
	КонецЕсли;	
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

&НаКлиенте
Процедура ДоступностьДоговора()

	Элементы.Договор.Доступность = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.Контрагент);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьСвязанныхРеквизитовОрганизации()

	Элементы.ЦМО.Доступность				= ЗначениеЗаполнено(Объект.Организация);
	Элементы.Подразделение.Доступность		= ЗначениеЗаполнено(Объект.Организация);
	Элементы.ДокументОснование.Доступность	= ЗначениеЗаполнено(Объект.Организация);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьСумму(Количество, Цена, Сумма)

	Сумма = Количество * Цена;

КонецПроцедуры // ПересчитатьСумму()

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьЦену(Количество, Цена, Сумма)

	Цена = Сумма / ?(Количество=0, 1, Количество);

КонецПроцедуры // ПересчитатьСумму()

&НаСервереБезКонтекста
Функция ЕдиницаИзмеренияНФА(Номенклатура)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеСчетаВСтроке(Форма, Строка, ЗаполнятьСчет)
	
	ПараметрыОбработки = УправлениеМатериальнымиЗапасамиКлиентСервер.ПараметрыУстановкиСчетаУчетаВСтроке(Форма, Строка);
	ПараметрыОбработки.Вставить("ЗаполнятьСчет", ЗаполнятьСчет);
	ПараметрыОбработки.Вставить("ДтКт",          "Дт");
	
	УправлениеМатериальнымиЗапасамиКлиентСервер.УстановитьДанныеСчетаУчетаВСтроке(Строка, ПараметрыОбработки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеСотрудника(Сотрудник, Период)

	ТребуемыеДанные = Новый Структура("СсылкаНаОбъект, Период, Фамилия, Имя, Отчество, Должность", Сотрудник);
	Справочники.Сотрудники.ПолучитьДанныеСотрудника(ТребуемыеДанные, Истина);
	Возврат ТребуемыеДанные;

КонецФункции // ПолучитьДанныеСотрудника()

&НаСервереБезКонтекста
Функция ПолучитьДанныеКомиссии(Комиссия, Период)

	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	ФИОФизическихЛицСрезПоследних.Фамилия КАК ФамилияЧленаКомиссии,
	              |	ФИОФизическихЛицСрезПоследних.Имя КАК ИмяЧленаКомиссии,
	              |	ФИОФизическихЛицСрезПоследних.Отчество КАК ОтчествоЧленаКомиссии,
	              |	ДанныеСотрудниковСрезПоследних.Должность КАК ДолжностьЧленаКомиссии,
	              |	СоставКомиссийОрганизаций.Комиссия.ДатаПриказа КАК ДатаПриказа,
	              |	СоставКомиссийОрганизаций.Комиссия.НомерПриказа КАК НомерПриказа,
	              |	СоставКомиссийОрганизаций.Председатель
	              |ИЗ
	              |	РегистрСведений.СоставКомиссийОрганизаций КАК СоставКомиссийОрганизаций
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&Период, ) КАК ФИОФизическихЛицСрезПоследних
	              |		ПО СоставКомиссийОрганизаций.Сотрудник.Контрагент.ЮридическоеФизическоеЛицо = ФИОФизическихЛицСрезПоследних.ФизическоеЛицо
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеСотрудников.СрезПоследних(&Период, ) КАК ДанныеСотрудниковСрезПоследних
	              |		ПО СоставКомиссийОрганизаций.Сотрудник = ДанныеСотрудниковСрезПоследних.Сотрудник
	              |ГДЕ
	              |	СоставКомиссийОрганизаций.Комиссия = &Комиссия";
	Запрос.УстановитьПараметр("Комиссия", Комиссия);
	Запрос.УстановитьПараметр("Период", Период);
	
	ДанныеКомиссии = Новый Структура("ДанныеПриказа, ТребуемыеДанные", Новый Структура("НомерПриказаКомиссии, ДатаПриказаКомиссии"),  Новый Массив);
	
	//ТребуемыеДанные = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ДанныеКомиссии.ДанныеПриказа.ДатаПриказаКомиссии) Тогда
			ДанныеКомиссии.ДанныеПриказа.ДатаПриказаКомиссии = Выборка.ДатаПриказа;
			ДанныеКомиссии.ДанныеПриказа.НомерПриказаКомиссии =  Выборка.НомерПриказа;
		КонецЕсли;	
		
		СтруктураДанных = Новый Структура("ФамилияЧленаКомиссии, ИмяЧленаКомиссии, ОтчествоЧленаКомиссии, ДолжностьЧленаКомиссии, Председатель");
		ЗаполнитьЗначенияСвойств(СтруктураДанных, Выборка);
		ДанныеКомиссии.ТребуемыеДанные.Добавить(СтруктураДанных);
	
	КонецЦикла; 
	
	Возврат ДанныеКомиссии;

КонецФункции // ПолучитьДанныеКомиссии()
 
&НаСервере
Процедура ЗаполнитьПоДокументуОснованию()

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(Объект.ДокументОснование);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");

КонецПроцедуры // ЗаполнитьПоДокументуОснованию()

&НаКлиенте
Функция ОрганизацияПустая()

	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ТекстПредупржедения = НСтр("ru='Необходимо выбрать организацию.'");
		ПоказатьПредупреждение(, ТекстПредупржедения);
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

&НаСервере
Процедура ОбработатьВыборПодбораНаСервере(ВыбранноеЗначение)
	
	СписокПодбора = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	Для Каждого ЭлементПодбора Из СписокПодбора Цикл
		НоваяСтрока = Объект.Материалы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ЭлементПодбора);
		ЗаполнитьДанныеСчетаВСтроке(ЭтотОбъект, НоваяСтрока, Ложь);
		ЗаполнитьТекстовыеЗаголовкиСтроки(НоваяСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьОСВХранилище()

	ТаблицаОС = Объект.ОсновныеСредства.Выгрузить();
	Возврат ПоместитьВоВременноеХранилище(ТаблицаОС);

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодбораОССервер(Знач ВыбранноеЗначение)
	
	ДобавленныеСтроки = УправлениеОсновнымиСредствами.ОбработатьПодборОсновныхСредств(Объект.ОсновныеСредства, ВыбранноеЗначение);
	
	Для каждого ДобавленнаяСтрока Из ДобавленныеСтроки Цикл
		ДобавленнаяСтрока.ЕдиницаИзмерения = ЕдиницаШт;
	КонецЦикла;
	
КонецПроцедуры

#Область УчетДрагМатериалов

&НаКлиенте
Функция СтруктураПроверяемыхРеквизитовДМ() Экспорт
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Организация");
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

&НаКлиенте
Процедура ДополнитьПараметрыДобавленияДМ(ПараметрыПодбора) Экспорт
	Если (Объект.ДрагоценныеМатериалы.Количество() > 0) И(ПараметрыПодбора.ВариантВводаДанных < 2) Тогда
		ПараметрыПодбора.Вставить("АдресДМВХранилище", ПоместитьДМВХранилище(ПараметрыПодбора));
	Иначе	
		ПараметрыПодбора.Вставить("АдресДМВХранилище", "");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьДМВХранилище(ПараметрыПодбора)
	
	МассивСтрок = ПолучитьСписокДМОбъектаНФА(ПараметрыПодбора);

	ТаблицаНФА = Объект.ДрагоценныеМатериалы.Выгрузить(МассивСтрок, "ОбъектНФА, ВидДрагМатериала, МассаДМ, КоличествоДМ, ЧистаяМасса, ЛигатурнаяМасса, ЕдИзм");
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаНФА);

КонецФункции

&НаСервере
Функция ПолучитьСписокДМОбъектаНФА(ПараметрыПодбора)
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ОбъектНФА", ПараметрыПодбора.ОбъектНФА);
	НайденныеСтроки = Объект.ДрагоценныеМатериалы.НайтиСтроки(ПараметрыОтбора);   	
	
	Возврат НайденныеСтроки;
КонецФункции	

&НаСервере
Процедура ОбработкаДобавленияДМДляОбъектаНаСервере(Знач ВыбранноеЗначение)
	ДобавленныеСтроки = УчетДрагМатериалов.ОбработатьДобавлениеДМДляОбъекта(
		Объект.ДрагоценныеМатериалы, ВыбранноеЗначение, , "ОбъектНФА,ВидДрагМатериала");
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКлючевоеПолеСтрокДрагМатериалов()
	Для каждого ТекСтрока Из Объект.ДрагоценныеМатериалы Цикл
		ТекСтрока.КлючСтроки = УчетДрагМатериаловКлиент.ПолучитьКлючСтроки(ТекСтрока.ОбъектНФА, "");
	КонецЦикла;
	
КонецПроцедуры	
	
&НаСервере
Процедура ЗаполнитьОбъектыСДрагМатериалами()
	ТаблицаВсехОбъектов = Объект.Материалы.Выгрузить(,"Номенклатура, Количество");
	
	ТаблицаОбъектовМЗ = Новый ТаблицаЗначений;
	ТаблицаОбъектовМЗ.Колонки.Добавить("КлючСтроки",Новый ОписаниеТипов("Строка"));
	ТаблицаОбъектовМЗ.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаОбъектовМЗ.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число"));
	
	НеСодержатДрагМатериалы = УчетДрагМатериалов.ПолучитьМассивТиповНоменклатурыБезДрагМатериалов();
	
	
	Для Каждого ТекСтрока Из ТаблицаВсехОбъектов Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
			Если НеСодержатДрагМатериалы.Найти(ТекСтрока.Номенклатура.ТипНоменклатуры) = Неопределено Тогда
				НоваяСтрока = ТаблицаОбъектовМЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				НоваяСтрока.КлючСтроки = УчетДрагМатериалов.ПолучитьКлючСтроки(ТекСтрока.Номенклатура, ""); 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	ОбъектыНФАСДрагМатериалами.Загрузить(ТаблицаОбъектовМЗ);
	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьВидимостьДанныхДрагМатериалов()
	Если ЭтаФорма.ИспользоватьОтборДрагМатериаловПоОбъектуНФА Тогда
		Элементы.ДрагоценныеМатериалыУстановитьРежимОтбораДМПоОбъекту.Пометка = Истина;
		ЗаполнитьКлючевоеПолеСтрокДрагМатериалов();
		
		Если Элементы.СписокНФАДокументаОснования.ТекущиеДанные <> Неопределено Тогда
			ОтборДрагМатериаловДляОбъекта(Элементы.СписокНФАДокументаОснования.ТекущиеДанные.КлючСтроки);
		КонецЕсли;
	Иначе
		Элементы.ДрагоценныеМатериалыУстановитьРежимОтбораДМПоОбъекту.Пометка = Ложь;
		Элементы.ДрагоценныеМатериалы.ОтборСтрок = Неопределено;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДрагМатериаловДляОбъекта(КлючСтроки)
	
	Элементы.ДрагоценныеМатериалы.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("КлючСтроки",КлючСтроки));
	
КонецПроцедуры	

&НаКлиенте
Процедура ЗаполнитьКлючиСтрокДрагМатериалов()
	Если ЭтаФорма.ИспользоватьОтборДрагМатериаловПоОбъектуНФА Тогда
		ЗаполнитьКлючевоеПолеСтрокДрагМатериалов();
	КонецЕсли;	
КонецПроцедуры	

&НаСервере
Функция ТаблицаОбъектовНФАДляДМВХранилище(ВыделенныеСтрокиТЧ)
	
	ТаблицаНФА = Новый ТаблицаЗначений;
	ТаблицаНФА.Колонки.Добавить("ОбъектНФА", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаНФА.Колонки.Добавить("ИнвНомер", Новый ОписаниеТипов("СправочникСсылка.ИнвентарныеНомераОС"));
	ТаблицаНФА.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	
	Для Каждого ИдСтроки Из ВыделенныеСтрокиТЧ Цикл
		СтрокаТЧ = ЭтаФорма.ОбъектыНФАСДрагМатериалами.НайтиПоИдентификатору(ИдСтроки);
		НоваяСтрока = ТаблицаНФА.Добавить();
		НоваяСтрока.ОбъектНФА = СтрокаТЧ.Номенклатура;
		НоваяСтрока.Количество = СтрокаТЧ.Количество;
	КонецЦикла;
	
	Возврат ТаблицаНФА;
	
КонецФункции	

&НаСервере
Функция ПоместитьТаблицуОбъектовНФАДляДМВХранилище(ВыделенныеСтрокиТЧ)
	
	ТаблицаНФА = ТаблицаОбъектовНФАДляДМВХранилище(ВыделенныеСтрокиТЧ);
	ТаблицаДМ = ПодготовитьДанныеОДрагМатериалах(ВыделенныеСтрокиТЧ); 
	
	Массив = Новый Массив;
	Массив.Добавить(ТаблицаНФА);
	Массив.Добавить(ТаблицаДМ);
	
	Возврат ПоместитьВоВременноеХранилище(Массив);

КонецФункции

&НаСервере
Функция ПодготовитьДанныеОДрагМатериалах(ВыделенныеСтроки) 
	ВыбранныеНФА = ТаблицаОбъектовНФАДляДМВХранилище(ВыделенныеСтроки);
	
	ТаблицаДМ = Объект.ДрагоценныеМатериалы.Выгрузить();
	ТаблицаДМ.Колонки.Добавить("ИнвНомер", Новый ОписаниеТипов("СправочникСсылка.ИнвентарныеНомераОС"));
	
	Результат = УчетДрагМатериалов.ЕдиныйСписокДрагМатериаловДляНесколькихОбъектовНФА(ТаблицаДМ, ВыбранныеНФА);
	
	Возврат Результат;
КонецФункции	

&НаКлиенте
Процедура ПослеЗакрытияВопросаОДрагМатериалах(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Параметры.НайденныеСтроки Цикл
		Объект.ДрагоценныеМатериалы.Удалить(ТекСтрока);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьТекстовыеЗаголовкиСтроки(ТекущаяСтрока)

	ТекущаяСтрока.ЗаголовокКоличество = НСтр("ru = 'Кол-во'");
	ТекущаяСтрока.ЗаголовокЦена = НСтр("ru = 'Цена'");
	ТекущаяСтрока.ЗаголовокСумма = НСтр("ru = 'Сумма'");

	ТекущаяСтрока.ЗаголовокБой = НСтр("ru = 'Бой'");
	ТекущаяСтрока.ЗаголовокНедостачи = НСтр("ru = 'Недостачи'");
	ТекущаяСтрока.ЗаголовокИзлишки = НСтр("ru = 'Излишки'");

КонецПроцедуры // ЗаполнитьТекстовыеЗаголовкиСтроки()

&НаСервере
Процедура ЗаполнитьТекстовыеДанныеВсехСтрок(ТаблицаДокумента)

	Для каждого ТекСтрока Из ТаблицаДокумента Цикл
	
		ЗаполнитьТекстовыеЗаголовкиСтроки(ТекСтрока);
	
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьКПСВыделеннымСтрокам(ВыбранноеЗначение)

	Для каждого ТекСтр Из Элементы.Материалы.ВыделенныеСтроки Цикл
	
		ТекущиеДанные = Объект.Материалы.НайтиПоИдентификатору(ТекСтр);
		ТекущиеДанные.КПС = ВыбранноеЗначение;
	
	КонецЦикла;

КонецПроцедуры // УстановитьКПСВыделеннымСтрокам()

&НаКлиенте
Процедура ОтобратьСтрокиТаблицыДрагМатериаловПриАктивизацииОбъектаНФА()
	Элемент = Элементы.СписокНФАДокументаОснования;
	ОтборДрагМатериаловДляОбъекта(Элемент.ТекущиеДанные.КлючСтроки);
КонецПроцедуры	

#КонецОбласти

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	ОбщегоНазначенияБГУКлиент.ВыполнитьЗадачу(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	ОбщегоНазначенияБГУ.ВыполнитьЗадачу(ЭтотОбъект, Контекст, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	ОбщегоНазначенияБГУКлиент.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияБГУКлиент.КомментарийСледующемуНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьВидимостьЭлементовФормы()

	ПоказыватьРеквизитыУчета = Истина;
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЭлектронныйДокументПоставщика") Тогда
		ПоказыватьРеквизитыУчета = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"МатериалыКПС", "Видимость", ПоказыватьРеквизитыУчета);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"МатериалыКФО", "Видимость", ПоказыватьРеквизитыУчета);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"МатериалыСчетУчета", "Видимость", ПоказыватьРеквизитыУчета);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"МатериалыКЭК", "Видимость", ПоказыватьРеквизитыУчета);
	
	ВестиКонтрольОстатковТоваров = РозничныеПродажиБГУ.ЭтоСкладТорговойТочки(Объект.ЦМО);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ПоступлениеТоваровНаСкладТорговойТочки", "Видимость", ВестиКонтрольОстатковТоваров);
	
КонецПроцедуры

&НаСервере
Процедура ЦМОПриИзмененииНаСервере()
	
	ВестиКонтрольОстатковТоваров = РозничныеПродажиБГУ.ЭтоСкладТорговойТочки(Объект.ЦМО);
	Объект.ПоступлениеТоваровНаСкладТорговойТочки = ВестиКонтрольОстатковТоваров;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ПоступлениеТоваровНаСкладТорговойТочки", "Видимость", ВестиКонтрольОстатковТоваров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткамЗавершение(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбработкаВыбораПодбораОССервер(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()

	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

КонецПроцедуры

#КонецОбласти

`

	obf := NewObfuscatory(context.Background(), Config{
		RepExpByTernary:  true,
		RepLoopByGoto:    true,
		RepExpByEval:     true,
		HideString:       true,
		ChangeConditions: true,
		AppendGarbage:    true,
	})
	obCode, err := obf.Obfuscate(code)
	if err != nil {
		fmt.Println(err)
		return
	}

	file, _ := os.Create(filepath.Join("out_data", uuid.NewString()))
	file.WriteString(obCode)
	file.Close()

}

func TestObfuscateLoop(t *testing.T) {

	code := `&НаСервереБезКонтекста
			Функция Команда1НаСервере()

				Для а = 0 По 100 Цикл
					Сообщить(а);	
				КонецЦикла;
				
				б = 0;
				Пока б < 100 Цикл
					Сообщить(б);
					б = б+1;
				КонецЦикла;
				
				fd = "dssdfdf";
				Для Каждого а Из Чтото Цикл
					Сообщить(а);	
				КонецЦикла;

			 КонецФункции`

	obf := NewObfuscatory(context.Background(), Config{})
	obCode, err := obf.Obfuscate(code)
	assert.NoError(t, err)

	// должны быть равны
	assert.Equal(t, true, compareHashes(code, obCode))

	if t.Failed() {
		t.Log(obCode)
		return
	}

	obf = NewObfuscatory(context.Background(), Config{RepLoopByGoto: true})
	obCode, err = obf.Obfuscate(code)
	assert.NoError(t, err)

	if t.Failed() {
		t.Log(obCode)
		return
	}

	// не должны быть равны
	assert.Equal(t, false, compareHashes(code, obCode))
}

func TestObfuscateExp(t *testing.T) {

	code := `&НаКлиенте
			Функция Команда1НаСервере()

				ВызватьИсключение(НСтр("ru = 'Недостаточно прав на использование сертификата.'"),
						КатегорияОшибки.НарушениеПравДоступа);
			 КонецФункции`

	obf := NewObfuscatory(context.Background(), Config{
		RepExpByTernary:  true,
		RepLoopByGoto:    true,
		RepExpByEval:     true,
		HideString:       true,
		ChangeConditions: true,
		AppendGarbage:    true,
	})

	obCode, err := obf.Obfuscate(code)
	if assert.NoError(t, err) {
		fmt.Println(obCode)
	}
}

func TestShuffleExp(t *testing.T) {
	//
	// 	code := `&НаСервереБезКонтекста
	// 			Процедура Команда1НаСервере()
	//
	// 			а = 1;
	// 			Сообщить(а);
	// 			а = а +1;
	// 			Сообщить(а);
	// 			а = а +1;
	// 			Сообщить(а);
	// 			а = а +1;
	// 			Сообщить(а);
	//
	// Если Истина Тогда
	// а = а +1;
	// 			Сообщить(а);
	// а = а +1;
	// 			Сообщить(а);
	// КонецЕсли;
	// а = а +1;
	// 			Сообщить(а);
	// а = а +1;
	// 			Сообщить(а);
	//
	// 			 КонецПроцедуры`
	//
	// 	obf := NewObfuscatory(context.Background(), Config{ShuffleExpressions: true})
	// 	obCode, err := obf.Obfuscate(code)
	// 	if err != nil {
	// 		fmt.Println(err)
	// 		return
	// 	}
	//
	// 	fmt.Println(obCode)
}

func TestGenCondition(t *testing.T) {
	ctx, _ := context.WithTimeout(context.Background(), time.Millisecond*500)
	obf := NewObfuscatory(ctx, Config{})

	for c := range obf.falseCondition {
		expression, _ := govaluate.NewEvaluableExpression(c)
		result, _ := expression.Evaluate(nil)
		if v, ok := result.(bool); v && ok {
			t.Fatal(c, "expression must be false")
		}
	}

	for c := range obf.trueCondition {
		expression, _ := govaluate.NewEvaluableExpression(c)
		result, _ := expression.Evaluate(nil)
		if v, ok := result.(bool); v && !ok {
			t.Fatal(c, "expression must be true")
		}
	}
}

func compareHashes(str1, str2 string) bool {
	str1 = strings.ReplaceAll(str1, " ", "")
	str1 = strings.ReplaceAll(str1, "\t", "")
	str1 = strings.ReplaceAll(str1, "\n", "")

	str2 = strings.ReplaceAll(str2, " ", "")
	str2 = strings.ReplaceAll(str2, "\t", "")
	str2 = strings.ReplaceAll(str2, "\n", "")

	hash1 := sha256.Sum256([]byte(strings.ToLower(str1)))
	hash2 := sha256.Sum256([]byte(strings.ToLower(str2)))

	return hash1 == hash2
}
